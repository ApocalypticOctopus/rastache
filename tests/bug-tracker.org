#+AUTHOR: Rl3x Fish ⚓
#+STARTUP: entitiespretty
#+OPTIONS: ^:{}

* Bug tracker
** Scanner
*** Standalone tag
Standalone tag should be removed from the template:
- [[file:comments.rkt::47]]
  #+BEGIN_SRC racket
  (rast-t-case "Standalone"
           #hash()
           "Begin.
            {{! Comment Block! }}
            End."
           "Begin.
            End."
           (list (token 'static "Begin.\n" null)
                 (token 'static "                 End."  null))
           "All standalone comment lines should be removed.")
  #+END_SRC
- [[file:comments.rkt::58]]
  #+BEGIN_SRC racket
  (rast-t-case "Indented Standalone"
              #hash()
              "Begin.
                 {{! Comment Block! }}
               End."
              "Begin.
               End."
              (list (token 'static "Begin.\n" null)
                    (token 'static "                 End."  null))
              "All standalone comment lines should be removed.")
  #+END_SRC
- [[file:comments.rkt::102]]
  #+BEGIN_SRC racket
  (rast-t-case "Multiline Standalone"
              #hash()
              "Begin.
               {{!
               Something's going on here...
               }}
               End."
              "Begin.
               End."
              (list (token 'static "Begin.\n" null)
                    (token 'static "                 End."  null))
              "All standalone comment lines should be removed.")
  #+END_SRC

Tag is not treated as standalone if a non blank char happens
around it:
- [[file:comments.rkt::128]]
  #+BEGIN_SRC racket
  (rast-t-case "Indented Inline"
            #hash()
            "  12 {{! 34 }}\n"
            "  12 \n"
            (list (token 'static "  12 " null)
                  (token 'static "\n" null))
            "Inline comments should not strip whitespace")
  #+END_SRC
- [[file:sections.rkt::492]]
  #+BEGIN_SRC racket
  (rast-t-case "Standalone Without Newline"
            #hash{( boolean . #t )}
            "#{{#boolean}}\n/\n  {{/boolean}}"
            ; Template should be considered as
            ; "#{{#boolean}}↩
            ;  /↩
            ;  {{/boolean}}
            "#\n/\n"
            "Standalone tags should not require a newline to follow them.")
  #+END_SRC
- [[file:sections.rkt::480]]
  #+BEGIN_SRC racket
  (rast-t-case "Standalone Without Previous Line"
            #hash{( boolean . #t )}
            "  {{#boolean}}\n#{{/boolean}}\n/"
            "#\n/"
            ; Template should be considered as:
            ; "  {{#boolean}}
            ;  #{{/boolean}}↩
            ;  /"
            (list (token 'static "" null)
                  (token 'section 'boolean
                         (list (token 'static "#" null)))
                  (token 'static "\n/" null))
            "Standalone tags should not require a newline to precede them.")
  #+END_SRC
- [[file:inverted.rkt::335]]
  #+BEGIN_SRC racket
  (rast-t-case "Standalone Without Newline"
            #hash{( boolean . #f )}
            "^{{^boolean}}\n/\n  {{/boolean}}"
            "^\n/\n"
            ; Should be considered as:
            ; "^{{^boolean}}↩
            ;  /↩
            ;    {{/boolean}}"
            (list (token 'static "^" null)
                  (token 'inverted-section
                         'boolean
                         (list (token 'static "\n/\n" null)))
                  (token 'static "" null))
            "Standalone tags should not require a newline to follow them.")
  #+END_SRC
- [[file:inverted.rkt::320]]
  #+BEGIN_SRC racket
  (rast-t-case "Standalone Without Previous Line"
            #hash{( boolean . #f )}
            "  {{^boolean}}\n^{{/boolean}}\n/"
            "^\n/"
            ; Should be considered as:
            ; "  {{^boolean}}
            ; ^{{/boolean}}↩
            ; /"
            (list (token 'static "" null)
                  (token 'inverted-section
                         'boolean
                         (list (token 'static "^" null)
                               (token 'static "\n" null)))
                  (token 'static "/" null))
            "Standalone tags should not require a newline to precede them.")
  #+END_SRC

Standalone interpolation tag should not be removed from the
template:
- [[file:interpolation.rkt::309]]
  #+BEGIN_SRC racket
  (rast-t-case "Interpolation - Standalone"
            #hash{(string . "---")}
            "  {{string}}\n"
            "  ---\n"
            (list (token 'static "  " null)
                  (token 'etag 'string null)
                  (token 'static "\n" null))
            "Standalone interpolation should not alter surrounding whitespace.")
  #+END_SRC
- [[file:interpolation.rkt::318]]
  #+BEGIN_SRC racket
  (rast-t-case "Triple Mustache - Standalone"
            #hash{(string . "---")}
            "  {{{string}}}\n"
            "  ---\n"
            (list (token 'static "  " null)
                  (token 'utag 'string null)
                  (token 'static "\n" null))
            "Standalone interpolation should not alter surrounding whitespace.")
  #+END_SRC
- [[file:interpolation.rkt::327]]
  #+BEGIN_SRC racket
  (rast-t-case "Ampersand - Standalone"
            #hash{(string . "---")}
            "  {{&string}}\n"
            "  ---\n"
            (list (token 'static "  " null)
                  (token 'utag 'string null)
                  (token 'static "\n" null))
            "Standalone interpolation should not alter surrounding whitespace.")
  #+END_SRC

Solution is while reading a line, test if the line is a standalone
one:
#+BEGIN_SRC racket
;; Match plain standalone tag, e.g., "  {{! 88 mph }}  "
#px"^\\s*\\{\\{(!|#|\\^|/|>|=)\\s*.*?\\}\\}?\\s*"
;; Match partial standalone tag, e.g., "  {{! 88 mph "
#px"^\\s*\\{\\{(!|#|\\^|/|>|=)\\s*[^(\\}\\})]*"
;; Match plain and partial standalone tag
#px"^\\s*\\{\\{(!|#|\\^|/|>|=)\\s*(.*?\\}\\}\\s*|[^(\\}\\})]*)"

;; Regexp pattern for standalone tag.
(define standalone-pattern
  (pregexp
     (string-append "^\\s*"
                    "\\{\\{"
                    "(!|#|\\^|/|>|=)"
                    "\\s*"
                    "("
                      ".*?\\}\\}\\s*"
                    "|"
                      "[^(\\}\\})]*"
                    ")")))

(define (is-standalone? line)
  (regexp-match-exact? standalone-pattern line))

(require rackunit)
(check-true (is-standalone? "{{! Comment Block! }}"))
(check-true (is-standalone? "{{#boolean}}"))
(check-true (is-standalone? "{{/boolean}}"))
(check-true (is-standalone? "  {{! Comment Block! }}"))
(check-true (is-standalone? "  {{#boolean}}"))
(check-true (is-standalone? "  {{/boolean}}"))
(check-true (is-standalone? "{{!"))

(check-false (is-standalone? "/"))
(check-false (is-standalone? "  {{! 12 }}34"))
(check-false (is-standalone? "  12 {{! 34 }}"))
(check-false (is-standalone? "#{{#boolean}}"))
(check-false (is-standalone? "#{{/boolean}}"))
(check-false (is-standalone? "^{{^boolean}}"))
(check-false (is-standalone? "^{{/boolean}}"))
(check-false (is-standalone? "  #{{#boolean}}"))
(check-false (is-standalone? "  #{{/boolean}}"))
(check-false (is-standalone? "  ^{{^boolean}}"))
(check-false (is-standalone? "  ^{{/boolean}}"))
(check-false (is-standalone? "  {{#boolean}}#"))
(check-false (is-standalone? "  {{/boolean}}#"))
(check-false (is-standalone? "  {{^boolean}}^"))
(check-false (is-standalone? "  {{/boolean}}^"))
(check-false (is-standalone? "{{string}}"))
(check-false (is-standalone? "{{{string}}}"))
(check-false (is-standalone? "{{&string}}"))
(check-false (is-standalone? "  {{string}}"))
(check-false (is-standalone? "  {{{string}}}"))
(check-false (is-standalone? "  {{&string}}"))
#+END_SRC

*** Dotted
Dotted tag's name (e.g.: ={{a.b.c}}=) should be split on periods and
generally be considered as a form of shorthand for sections:
#+BEGIN_EXAMPLE
{{person.name}} == {{#person}}{{name}}{{/person}}
{{a.b.c}} == {{#a}}{{#b}}{{c}}{{/b}}{{/a}}
{{&a.b.c}} == {{#a}}{{#b}}{{&c}}{{/b}}{{/a}}
{{{a.b.c}}} == {{#a}}{{#b}}{{{c}}}{{/b}}{{/a}}
#+END_EXAMPLE

For section, the consideration is:
#+BEGIN_EXAMPLE
{{#person.name}}Here{{/person.name}} == {{#person}}{{#name}}Here{{/person}}{{/name}}
{{#a.b.c}}Here{{/a.b.c}} == {{#a}}{{#b}}{{#c}}Here{{/c}}{{/b}}{{/a}}
#+END_EXAMPLE

For inverted section, the consideration is:
#+BEGIN_EXAMPLE
\not{} {{a.b.c}} == {{^a.b.c}}

And the logical interpretation:
\not{} (a \wedge{} b \wedge{} c)      (1)
\equiv{} \not{}a \vee{} \not{}b \vee{} \not{}c     (2)
#+END_EXAMPLE
Because (2) isn't encodable with current mustache syntax, we have to
introduce a new syntactic category. The new syntactic category named
`inverted-section-or' enables the encoding of dotted tag's name
inverted section on split tag's name.

** Render
*** Variable
A ={{name}}= tag renders the value of the =name= key in the current
context. If there is no such key, nothing is rendered.

/Lambda:/ If the value of the =name= key is a lambda, the data is the
value returned by the method with the given =name=. The lambda should
be called with zero or one argument. In presence of lambda with arity
1, the context is passed.

*** Sections
Section render blocks of text one or more time, depending on the value
of the key in the current context. The behavior of the section is
determined by the value of the key.

**** Non-Empty List
When the value is a non-empty list, the block is rendered once
for each item in the list. The context of the block is set to
the current item in the list for each iteration (the context is
the context of section overriding with the context of the
current item).

For instance, template:
#+BEGIN_EXAMPLE
{{#upper}} {{#repo}} {{name}} {{surname}}, {{/repo}} {{/upper}}
#+END_EXAMPLE

With hash 1:
#+BEGIN_SRC racket
#hash{ ("upper" .
        #hash{ ("repo" .
                '( #hash{ ("name" . "resque") }
                   #hash{ ("name" . "hub") }
                   #hash{ ("name" . "rip") } ) )} )
       ("surname" . "foo") }
#+END_SRC

Produce:
#+BEGIN_EXAMPLE
resque foo, hub foo, rip foo,
#+END_EXAMPLE

Whereas, whit hash 2:
#+BEGIN_SRC racket
#hash{ ("upper" .
        #hash{ ("repo" .
                '( #hash{ ("name" . "resque") }
                   #hash{ ("name" . "hub") }
                   #hash{ ("name" . "rip") }) )
              ("surname" . "bar")} )
       ("surname" . "foo") }
#+END_SRC

Produce:
#+BEGIN_EXAMPLE
resque bar, hub bar, rip bar,
#+END_EXAMPLE

Which is a sort of context overriding.

/Lambda:/ If the *value of a section variable is a Lambda*, it will be
called with the context of the current item in the list on each
iteration. (To be more expressive, implements the context passing just
like we've done for [[*Variable][variable]], but override context with context of the
current item)

Template:
#+BEGIN_EXAMPLE
{{#repo}}{{BIGNAME}}{{/repo}}
#+END_EXAMPLE

Context:
#+BEGIN_SRC racket
`#hash{ ("repo"    . '( #hash{ ("name" . "resque") }
                        #hash{ ("name" . "hub") }
                        #hash{ ("name" . "rip") } ))
        ("BIGNAME" . ,(λ (self) (string-upcase (rast-ref self 'name)))) }
#+END_SRC

Produce:
#+BEGIN_EXAMPLE
RESQUE HUB RIP
#+END_EXAMPLE

**** Non-false values
When the value is non-false but not a list, it will be used as the
context for a single rendering of the block. +This is also true if the
value is a function with no parameters+ (not sure about this,
implements this only at the end of the implementation to ensure if
this is a requirement or not).

**** False values, Empty lists or Not existing key
If the ={{#name}}= tag doesn't exist or resolves to a false value or
empty lists, henceforth the section will not be displayed.

On the other hand, inverted section should be print if the tag
resolves to a false value, an empty list or a not existing key.

**** Lambdas
When *the value is a lambda*, it is called with the section's literal
block of text *un-rendered* as its first argument. The second argument
is the rendering function that use the current view as its view
argument.

Template:
#+BEGIN_EXAMPLE
{{#bold}}Hi {{name}}.{{/bold}}
#+END_EXAMPLE

Context:
#+BEGIN_SRC racket
`#hash{
  ("name" . "Tater")
  ("bold" . ,(λ (text, render)
              (string-append "<b>" (render text) "</b>"))) }
#+END_SRC

Produce:
#+BEGIN_SRC html
<b>Hi Tater.</b>
#+END_SRC

*** Lambdas
If the *value of the =name= key is a lambda*, the data is the value
returned by the method with the given =name=. The lambda should be
called with zero or one argument. In presence of lambda with arity 1,
the context is passed.

Template:
#+BEGIN_EXAMPLE
{{foo}}
#+END_EXAMPLE

#+BEGIN_SRC racket
`#hash{ ("foo" . ,(λ (self) (string-upcase (rast-ref self 'bar))))
        ("bar" . "bar") }
#+END_SRC

#+BEGIN_EXAMPLE
BAR
#+END_EXAMPLE

If the *value of a section variable is a Lambda*, it will be called
with the context of the current item in the list on each iteration.
(To be more expressive, implements the context passing just like we've
done for variable, but override context with context of the current
item)

Template:
#+BEGIN_EXAMPLE
{{#repo}}{{BIGNAME}}{{/repo}}
#+END_EXAMPLE

Context:
#+BEGIN_SRC racket
`#hash{ ("repo"    . '( #hash{ ("name" . "resque") }
                        #hash{ ("name" . "hub") }
                        #hash{ ("name" . "rip") } ))
        ("BIGNAME" . ,(λ (self) (string-upcase (rast-ref self 'name)))) }
#+END_SRC

Produce:
#+BEGIN_EXAMPLE
RESQUE HUB RIP
#+END_EXAMPLE

When *the section key value is a lambda*, it is called with the
section's literal block of text *un-rendered* as its first argument.
The second argument is the rendering function that use the current
view as its view argument.

Template:
#+BEGIN_EXAMPLE
{{#bold}}Hi {{name}}.{{/bold}}
#+END_EXAMPLE

Context:
#+BEGIN_SRC racket
`#hash{
  ("name" . "Tater")
  ("bold" . ,(λ (text, render)
              (string-append "<b>" (render text) "</b>"))) }
#+END_SRC

Produce:
#+BEGIN_SRC html
<b>Hi Tater.</b>
#+END_SRC

/Note:/ To get the arity of a procedure use =procedure-arity=:
#+BEGIN_SRC racket
> (procedure-arity (lambda (a b c) '88mph))
3
> (procedure-arity (lambda () '88mph))
0
> (procedure-arity (lambda _ '88mph))
(arity-at-least 0)
#+END_SRC
