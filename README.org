* Rastache

** Mustache expression
   #+BEGIN_EXAMPLE
   mustache-expr := '( mustache-data ... )

   mustache-data := (datum val ...)

   val := boolean?
        | number?
        | string?
        | lambda?
        | mustache-expr?



   '((name "Jim")
     (age 24)
     (admin #t))

   (make-immutable-hash (list ('name "Jim")
                              ('age 24)
                              ('admin #t)))

   (define (mustache-name ctx) (hash-ref ctx 'name))
   (define (mustache-age ctx) (hash-ref ctx 'age))
   (define (mustache-admin ctx) (hash-ref ctx 'admin))



   '((header (lambda () "Colors"))
     (item '((name "red") (current #t) (url "#Red"))
           '((name "green") (current #f) (url "#Green"))
           '((name "blue") (current #f) (url "#Blue")))
     (link (lambda (self) (not (eq? (self-current self) #t))))
     (list (lambda (self) (not (eq? (length (self-item self)) 0))))
     (empty (lambda (self) (eq? (length (self-item self)) 0))))

   (make-immutable-hash
     (list ('header (lambda () "Colors"))
           ('item (list
                     (make-immutable-hash (list ('name "red")
                                                ('current #t)
                                                ('url "#Red")))
                     (make-immutable-hash (list ('name "green")
                                                ('current #f)
                                                ('url "#Green")))
                     (make-immutable-hash (list ('name "blue")
                                                ('current #f)
                                                ('url "#Blue")))))
           ('link (lambda (ctx) (not (eq? (mustache-current ctx) #t))))
           ('list (lambda (ctx) (not (eq? (length (mustache-item ctx)) 0))))
           ('empty (lambda (ctx) (eq? (length (mustache-item ctx)) 0)))))

   (define (mustache-header ctx) (hash-ref ctx 'header))
   (define (mustache-item ctx) (hash-ref ctx 'item))
   (define (mustache-name ctx) (hash-ref ctx 'name))
   (define (mustache-current ctx) (hash-ref ctx 'current))
   (define (mustache-url ctx) (hash-ref ctx 'url))
   (define (mustache-link ctx) (hash-ref ctx 'link))
   (define (mustache-list ctx) (hash-ref ctx 'list))
   (define (mustache-empty ctx) (hash-ref ctx 'empty))
   #+END_EXAMPLE
